{"data":{"markdownRemark":{"html":"<p>Recently I had to figure out how to traverse up the DOM tree so I could target a sibling of a HTML element that was two levels up the DOM (grandparent). The <code class=\"language-text\">.parent()</code> method can travel a single level up the DOM tree to find the parent element. That wouldn't work because I need to go two levels up. </p>\n<p>What I needed is the <code class=\"language-text\">.closest()</code> method. What I needed to do was traverse up the DOM and find the first parent element that matches the selector (the element in the parenthesis).</p>\n<p>Once I found that element then I would store it in a variable. Then I used the <code class=\"language-text\">.find()</code> method to search through the all descendant elements of the selector. From what I can tell I would be able to use the <code class=\"language-text\">.children()</code> method, which only travels a single level down, in this instance.</p>\n<ol>\n<li>\n<p><code class=\"language-text\">.find()</code>: It will search through the matched elements’ child, grandchild, great-grandchild, etc,... All levels down.</p>\n</li>\n<li>\n<p><code class=\"language-text\">.children()</code>: It will search through the matched elements’ child only. Single level down.</p>\n</li>\n</ol>\n<iframe height=\"400\" style=\"width: 100%;\" scrolling=\"no\" title=\"15015ac5b02dc6030d40755de9ca2988\" src=\"https://codepen.io/rebeccaeilering/embed/15015ac5b02dc6030d40755de9ca2988?height=400&theme-id=light&default-tab=js,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/rebeccaeilering/pen/15015ac5b02dc6030d40755de9ca2988'>15015ac5b02dc6030d40755de9ca2988</a> by Rebecca Eilering\n  (<a href='https://codepen.io/rebeccaeilering'>@rebeccaeilering</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>This example shows that when I click on an element that has the class of <code class=\"language-text\">.name</code> I want to traverse up the DOM tree to find the first parent element that matches the class <code class=\"language-text\">.item</code>. I will store that in a variable called <code class=\"language-text\">parentItem</code>. Then I traverse down the DOM tree using the <code class=\"language-text\">.find()</code> method (all levels inside the parent element which is what's stored in parentItem variable.) to find the first element that has the class of <code class=\"language-text\">.desc</code> and then toggle that element.</p>\n<p>Note: I could have used the <code class=\"language-text\">.children()</code> method (instead of <code class=\"language-text\">.find()</code>) too because I only had one level to traverse down in the DOM.</p>\n<p>The second click function is similar but I only need to get the parent selector of the button I click in order to hide the parent.</p>\n<p>In the above example, I used jQuery because that's what we're using for that project at work but this will work with regular ole' javascript too but it's a little more complicated. I'll get to that at a later time.</p>","timeToRead":2,"excerpt":"Recently I had to figure out how to traverse up the DOM tree so I could target a sibling of a HTML element that was two levels up the DOM…","frontmatter":{"title":"Traversing the DOM Tree with .closest() and .find() Methods","cover":"/img/cover.jpg","date":"02/24/2020","category":"javascript","tags":["web development","front end development","javascript","DOM","jquery","closest","find"]},"fields":{"nextTitle":"Not Motivated to Code","nextSlug":"/not-motivated-to-code","prevTitle":"NodeList vs. Array","prevSlug":"/node-list-vs-array","slug":"/traversing-the-dom-tree-with-closest-and-find-methods","date":"2020-02-24T06:00:00.000Z"}}},"pageContext":{"slug":"/traversing-the-dom-tree-with-closest-and-find-methods"}}