{"data":{"markdownRemark":{"html":"<p>I ran into an issue where I had to remove a style from some dynamically generated code. I couldn't remove a class from one item because I didn't have access to change the generated HTML. I had six <code class=\"language-text\">.photo</code> elements. When the user clicks on that element, the click triggers a modal that contains a video embed URL from YouTube. The client only had four videos at the moment, so they wanted me to remove the play button graphic (that was styled with the psuedo-elemnent <code class=\"language-text\">::before</code> so it was overlaid the <code class=\"language-text\">.photo</code> element) and disable the modal for the two items that didn't have video embed URLs. </p>\n<p>This sounded like a job for some JavaScript. </p>\n<p>What all the <code class=\"language-text\">.photo</code> elements had in common was they had a data attribute that contained the embed URL for the video. All would have a different attribute value. The data attribute did have a default video in case there wasn't a video embed URL loaded but the client didn't want it to be used. However, I figured it would be of use to me. All the elements that didn't have a new video embed URL loaded would have the same data attribute value. So I figured that would be my target so I could alter the CSS and disable the modal.</p>\n<p>In addition, I wanted to add a <code class=\"language-text\">display: none;</code> style to the <code class=\"language-text\">::before</code> pseudo element. I decided to add a class to my css that would be appended to the <code class=\"language-text\">.photo</code> element. Then in the CSS, add another <code class=\"language-text\">::before</code> pseudo element to the new class. I don't know if that is the best way, but it works for what I want to do.</p>\n<p>The HTML and CSS looked started like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>photo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-videourl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.youtube.com/embed/8C5mhJq8UNs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.photo::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('file/path')</span>no-repeat center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The JavaScript was actually really simple. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.photo[data-videourl=\"https://www.youtube.com/embed/8C5mhJq8UNs\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no-play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For any <code class=\"language-text\">.photo</code> element that had the <code class=\"language-text\">data-videourl</code> attribute, a <code class=\"language-text\">.no-play</code> class that will have a <code class=\"language-text\">::before</code> pseudo-element with a <code class=\"language-text\">display: none;</code> style. This will override the <code class=\"language-text\">::before</code> pseudo-element attached to the <code class=\"language-text\">.photo</code> element. That's the cascade at work. That removed the play graphic overlay that was on <code class=\"language-text\">.photo</code> element.</p>\n<p>After the JavaScript runs, the HTML and CSS looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>photo no-play<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-videourl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://www.youtube.com/embed/8C5mhJq8UNs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.photo::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url('file/path')</span>no-repeat center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.no-play</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* I wanted to remove the pointer because the element wouldn't be clickable */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.no-play::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The jQuery <code class=\"language-text\">.off()</code> method is then chained to the end to remove the click event handler that was being used to fire off the modal. Here's more info on that <a href=\"http://api.jquery.com/off/\">here</a>.</p>\n<p>I learned a few things:</p>\n<ol>\n<li>How to use data attribues in JavaScript</li>\n<li>How to deal with pseudo elements with JavaScript</li>\n<li>How to disable a click event</li>\n</ol>","timeToRead":2,"excerpt":"I ran into an issue where I had to remove a style from some dynamically generated code. I couldn't remove a class from one item because Iâ€¦","frontmatter":{"title":"Using a Data Attribute in Javascript to Edit a Pseudo-Element","cover":"https://unsplash.it/1152/300/?random?TheButterflyoftheEdge","date":"02/02/2019","category":"javascript","tags":["javascript","data attributes","pseudo element","web development","front end development"]},"fields":{"nextTitle":"Thoughts on Broad Band by Claire Evans","nextSlug":"/thoughts-on-broad-band-by-claire-evans","prevTitle":"A Function Translated from jQuery to JavaScript","prevSlug":"/a-function-translated-from-j-query-to-java-script","slug":"/using-a-data-attribute-in-javascript-to-edit-a-pseudo-element","date":"2019-02-02T06:00:00.000Z"}}},"pageContext":{"slug":"/using-a-data-attribute-in-javascript-to-edit-a-pseudo-element"}}