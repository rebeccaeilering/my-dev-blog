{"data":{"markdownRemark":{"html":"<p>I have no idea how to work databases. I'm highly intimidated by them. I have been using JSON for data in personal projects but I certainly wouldn't say they are databases. However, JSON allows me to do some more dynamic stuff and create personal projects I find to be more interesting and useful. </p>\n<p>Though without much server side or database knowledge, I find some of my personal projects limiting. However, I don't want to be full stack (yet) and want to focus on a limited amount of things specific to HTML, CSS, and JavaScript. On the flipside, I don't just want to make static websites that don't do anything other than present info like a brochure. Seems boring to me.</p>\n<p>It seems a bit ridiculous but I've been working on a project to create a searchable inventory of 45s (7 inch vinyl singles played on record players) for over two years. Maybe it's three years at this point. I don't know. My biggest hangup has been documenting the singles into the JSON file. This is literally typing in each record and the info associated with it (artist, song on the a side, song on the b side) and it's boring boring boring. The other part is pulling in and parsing the JSON. That hasn't taken 2-3 years to figure out (thank goodness). Then there is the styling but that's not an issue for me. It's taking so long because of laziness.</p>\n<p>Originally for this project I was using XHR (XMLHttpRequest) to pull in and parse the data from my JSON file. Recently, I decided to refactor the code to use the Fetch API to handle that functionality. Both work just fine from what I can tell.</p>\n<p>Here is the XHR code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"records.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">displayRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xhttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> records <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">;</span>\n        records<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> records<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            output <span class=\"token operator\">+=</span> \n            <span class=\"token string\">'&lt;div class=\"artist-song close\">'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;h3 class=\"title\">'</span> <span class=\"token operator\">+</span> records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>artist <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h3>'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'A Side: '</span> <span class=\"token operator\">+</span> records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>aside <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;br>'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'B Side: '</span> <span class=\"token operator\">+</span> records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bside <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;button class=\"btn-more\">&lt;span class=\"fas fa-angle-down\">&lt;/span>&lt;/button>'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;div class=\"info-sec\">'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;h4>Additional Information&lt;/h4>'</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&lt;/div>'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;/div>'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> output<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is the fetch code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'records.json'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>artist<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        output <span class=\"token operator\">+=</span> \n        <span class=\"token string\">'&lt;div class=\"artist-song close\">'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;h3 class=\"title\">'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>artist <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h3>'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;p>'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'A Side: '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>aside <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;br>'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'B Side: '</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span>records<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>bside <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;button class=\"btn-more\">&lt;span class=\"fas fa-angle-down\">&lt;/span>&lt;/button>'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;div class=\"info-sec\">'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;h4>Additional Information&lt;/h4>'</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">'&lt;/div>'</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">'&lt;/div>'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'records'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> output<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    error<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">\"Error!\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>To me the fetch code looks more simple and easier to read. It probably will work fine for my little personal project.</p>\n<p>There may be some caveats though. I've read that XHR is better at error handling. Fetch gets more complicated if you try to deal with errors. It seems that Fetch doesn't care whether your request succeeded. It only care about receiving a response from the server. Also, if you have to support Internet Explorer then you can't use Fetch. Personally, I don't support IE but at my job we do so I can't use it there. </p>\n<p>Here's a better explanation of this issue. If you see the Fetch code after all the error handling code added, it doesn't seem more simple than XHR.</p>\n<p><a href=\"https://css-tricks.com/using-fetch/#article-header-id-6\">Using Fetch (CSS Tricks)</a></p>","timeToRead":3,"excerpt":"I have no idea how to work databases. I'm highly intimidated by them. I have been using JSON for data in personal projects but I certainly…","frontmatter":{"title":"Using Fetch vs XHR","cover":"https://unsplash.it/1152/300/?random?TheButterflyoftheEdge","date":"04/10/2019","category":"javascript","tags":["xhr","fetch api","json","front-end development","web development"]},"fields":{"nextTitle":"Hidden Figures by Margot Lee Shetterly","nextSlug":"/hidden-figures-by-margot-lee-shetterly","prevTitle":"Moving My Blog to Gatsby","prevSlug":"/moving-my-blog-to-gatsby","slug":"/using-fetch-vs-xhr","date":"2019-04-10T05:00:00.000Z"}}},"pageContext":{"slug":"/using-fetch-vs-xhr"}}